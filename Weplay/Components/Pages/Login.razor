@page "/login"
@using System.Diagnostics
@using Weplay.Components.Widgets
@using Weplay.Services
@inject AuthService AuthService
@using System.Net;
@using System.Text;



<div class="w-full max-w-md space-y-8 p-8">
    <!-- Header -->
    <div class="text-center">
        <div class="relative mx-auto mb-6 flex h-16 w-16 items-center justify-center">
            <div class="absolute inset-0 rounded-full bg-gradient-to-br from-zinc-700 to-zinc-800 opacity-20"></div>
            <svg class="h-8 w-8 text-zinc-50" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
            </svg>
        </div>
        <h1 class="hidden">Hidden element</h1>
        <h1 class="text-2xl font-semibold text-zinc-50">Welcome back</h1>
        <p class="mt-2 text-sm text-zinc-400">Sign in to your account to continue</p>
    </div>

    <!-- Google Sign In -->
    <div class="space-y-4">
        <button @onclick="HandleGoogleAuth" type="button" id="googleSignIn" class="flex h-12 w-full cursor-pointer items-center justify-center space-x-3 rounded-md border border-zinc-700 bg-zinc-900 font-medium text-zinc-50 transition-all duration-200 hover:bg-zinc-800">
            @if (!isGoogleLogging)
            {
                <div id="googleButtonContent" class="flex items-center space-x-3">
                    <svg class="h-5 w-5" viewBox="0 0 24 24">
                        <path fill="currentColor"
                        d="M22.56 12.25c0-.78-.07-1.53-.20-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                        <path fill="currentColor"
                        d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                        <path fill="currentColor"
                        d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                        <path fill="currentColor"
                        d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.60 3.30-4.53 6.16-4.53z" />
                    </svg>
                    <span>Continue with Google</span>
                </div>
            }
            else
            {
                <div id="googleLoadingContent" class="flex items-center space-x-2">
                    <div class="h-4 w-4 animate-spin rounded-full border-2 border-zinc-400 border-t-zinc-50"></div>
                    <span>Redirecting…</span>
                </div>
            }
        </button>

        <div class="relative">
            <div class="absolute inset-0 flex items-center">
                <div class="w-full border-t border-zinc-500"></div>
            </div>
            <div class="relative flex justify-center text-xs uppercase">
                <span class="bg-zinc-900 px-2 text-zinc-500">Or continue with</span>
            </div>
        </div>

        <!-- Email Form -->
        <form id="emailForm" class="space-y-4" @onsubmit="HandleSubmit">
            <div class="space-y-2">
                <label for="email" class="text-sm font-medium text-zinc-300">Email address</label>
                <div class="relative">
                    <input id="email"
                    type="email"
                    @bind="email"
                    @oninput="() => isError = false"
                    placeholder="Enter your email"
                    required
                    class="h-12 w-full rounded-md border @(isError ? "border-red-700" : "border-zinc-700") bg-zinc-900 px-3 text-zinc-50 placeholder:text-zinc-500 focus:border-zinc-600 focus:ring-1 focus:ring-zinc-600 focus:outline-none" />
                    @if (isError)
                    {
                        <Tooltip Content="@errorMessage" Position="top">
                            <svg class="-translate-y-1/2 absolute right-2 top-1/2 h-4 w-4 transform text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M12 2a10 10 0 100 20 10 10 0 000-20z"></path>
                            </svg>
                        </Tooltip>
                    }
                </div>
            </div>

            <div class="space-y-2">
                <label for="password" class="text-sm font-medium text-zinc-300">Password</label>
                <div class="relative">
                    <input id="password"
                    type="password"
                    autocomplete="on"
                    @bind="password"
                    @oninput="() => isError = false"
                    placeholder="Enter your password"
                    required
                    class="h-12 w-full rounded-md border @(isError ? "border-red-700" : "border-zinc-700") bg-zinc-900 px-3 text-zinc-50 placeholder:text-zinc-500 focus:border-zinc-600 focus:ring-1 focus:ring-zinc-600 focus:outline-none" />
                    @if (isError)
                    {
                        <Tooltip Content="@errorMessage" Position="top">
                            <svg class="-translate-y-1/2 absolute right-2 top-1/2 h-4 w-4 transform text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M12 2a10 10 0 100 20 10 10 0 000-20z"></path>
                            </svg>
                        </Tooltip>
                    }
                </div>
            </div>

            <button type="submit"
            id="emailSignIn"
            class="flex h-12 w-full cursor-pointer items-center justify-center rounded-md bg-zinc-50 font-medium text-zinc-900 transition-all duration-200 hover:bg-zinc-200">
                @if (!isSubmitting)
                {
                    <span id="emailButtonText">Login</span>
                }
                else
                {
                    <div id="emailLoadingContent" class="flex items-center space-x-2">
                        <div class="h-4 w-4 animate-spin rounded-full border-2 border-zinc-600 border-t-zinc-900"></div>
                        <span>Loging in...</span>
                    </div>
                }
            </button>
        </form>

        <!-- Footer Links -->
        <div class="space-y-2 text-center">
            <a href="/forgot-password" class="cursor-pointer text-sm text-zinc-400 transition-colors hover:text-zinc-300">Forgot your password?</a>
            <p class="text-sm text-zinc-500">
                Don't have an account?
                <a href="/signup" class="cursor-pointer font-medium text-zinc-300 transition-colors hover:text-zinc-50">Sign up</a>
            </p>
        </div>

        <!-- Security Indicators -->
        <div class="flex items-center justify-center space-x-6 pt-4 text-zinc-500">
            <div class="flex items-center space-x-1">
                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
                <span class="text-xs">Encrypted</span>
            </div>
            <div class="flex items-center space-x-1">
                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
                <span class="text-xs">Secure</span>
            </div>
            <div class="flex items-center space-x-1">
                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
                <span class="text-xs">Private</span>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isSubmitting = false;
    private bool isGoogleLogging = false;
    private string email = string.Empty;
    private string password = string.Empty;
    private bool isError = false;
    private string errorMessage = string.Empty;


    private async Task HandleSubmit()
    {
        isSubmitting = true;
        isError = false;
        int res = await AuthService.Login(email, password);
        if (res == 1)
        {
            NavigationManager.NavigateTo("/", replace:true);
        }
        else if (res == 2)
        {
            NavigationManager.NavigateTo($"/verification/?email={email}");
        }
        else
        {
            isError = true;
            errorMessage = "Invalid email or password";
        }
        isSubmitting = false;
    }

    
    private async Task HandleGoogleAuth()
    {
        isGoogleLogging = true;

        string clientId = Config.CLIENTID;
        string redirectUri = Config.REDIRECTURL;
        string scope = "openid email profile";

        string responseType = "token%20id_token";
        string nonce = Guid.NewGuid().ToString("N");
        string authUrl = $"https:accounts.google.com/o/oauth2/v2/auth" +
                         $"?client_id={clientId}" +
                         $"&redirect_uri={Uri.EscapeDataString(redirectUri)}" +
                         $"&response_type={responseType}" +
                         $"&scope={Uri.EscapeDataString(scope)}" +
                         $"&nonce={nonce}";
        Debug.WriteLine($"Using redirect URI: {redirectUri}");
        HttpListener listener = null;
        try
        {
            listener = new HttpListener();
            listener.Prefixes.Add(redirectUri);
            listener.Start();

            Process.Start(new ProcessStartInfo
                {
                    FileName = authUrl,
                    UseShellExecute = true
                });

            var context = await listener.GetContextAsync();
            var request = context.Request;
            var response = context.Response;

            string responseHtml = @"
            <html>
                <body>
                    <h2>Authentication complete</h2>
                    <p>You may now close this window and return to the app.</p>
                </body>
            </html>";
            byte[] buffer = Encoding.UTF8.GetBytes(responseHtml);
			Debug.WriteLine($"Response HTML: {responseHtml}");
            response.ContentLength64 = buffer.Length;
            await response.OutputStream.WriteAsync(buffer, 0, buffer.Length);
            response.OutputStream.Close();
            listener.Stop();

            string rawUrl = request.RawUrl;
            string fragment = "";
            if (rawUrl.Contains("#"))
            {
                fragment = rawUrl.Substring(rawUrl.IndexOf("#") + 1);
            }

            var queryParams = System.Web.HttpUtility.ParseQueryString(fragment);
            string idToken = queryParams["id_token"];
            Debug.WriteLine($"ID Token: {idToken}");
            if (!string.IsNullOrEmpty(idToken))
            {
                int backendResult = await AuthService.VerifyGoogleLogin(idToken);
                if (backendResult == 1)
                {
                    NavigationManager.NavigateTo("/");
                }
                
            }
           
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Something went wrong in Google authentication: {ex}");
        }
        finally
        {
            isGoogleLogging = false;
            listener?.Close();
        }
    }

}
