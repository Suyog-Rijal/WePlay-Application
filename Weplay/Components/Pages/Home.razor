@page "/"
@using System.Diagnostics
@using Weplay.Dtos.Room
@using Weplay.Services
@inject AuthService AuthService
@inject RoomService RoomService
@using Weplay.Components.Widgets
@inject HomeClientService HomeClientService
@inject RoomClientService RoomClientService
@implements IDisposable


<AuthorizeView>
    <Authorized>
        <div class="flex h-screen w-full flex-col">
            @* Forms *@
            @if (isCreateRoomVisible)
            {
                <CreateRoom IsCreateRoomVisible="@isCreateRoomVisible" OnClose="@(() => isCreateRoomVisible = false)" />
            }

            @* Header *@
            <div class="border-b border-zinc-700/50 bg-zinc-900/95 backdrop-blur-sm">
                <div class="p-4">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <img loading="lazy" src="/images/logo.png" alt="WePlay Logo" class="h-14 w-14" />
                            <div>
                                <h1 class="text-lg font-semibold text-zinc-50">WePlay</h1>
                                <p class="hidden text-xs text-zinc-400 sm:block">Stream movies and shows with friends</p>
                            </div>
                        </div>

                        <div class="hidden items-center space-x-4 md:flex">
                            <button @onclick="() => isCreateRoomVisible = !isCreateRoomVisible"
                            class="group flex items-center space-x-2 rounded-md bg-zinc-50 px-4 py-2.5 text-sm font-medium text-zinc-900 transition-all duration-200 hover:bg-zinc-200 focus:ring-2 focus:ring-zinc-600 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none">
                                <span>Create Room</span>
                                <svg class="h-4 w-4 transition-transform group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                </svg>
                            </button>

                            <button class="group flex items-center space-x-2 rounded-md border border-zinc-700 bg-zinc-900 px-4 py-2.5 text-sm font-medium text-zinc-300 transition-all duration-200 hover:bg-zinc-800 hover:text-zinc-50 focus:ring-2 focus:ring-zinc-600 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none">
                                <span>Join Room</span>
                                <svg class="h-4 w-4 transition-transform group-hover:translate-x-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14" />
                                </svg>
                            </button>

                            <div class="flex items-center space-x-3">
                                <div class="relative h-8 w-8">
                                    @if (!string.IsNullOrEmpty(context.User.FindFirst("profile_picture")?.Value))
                                    {
                                        <img loading="lazy"
                                        src="@context.User.FindFirst("profile_picture")?.Value"
                                        alt="User Avatar"
                                        class="h-8 w-8 rounded-full border border-zinc-600 object-cover object-center" />
                                    }
                                    else
                                    {
                                        var name = context.User.Identity?.Name ?? "";
                                        var firstLetter = name.Length > 0 ? name.Substring(0, 1).ToUpper() : "?";
                                        <span class="flex h-8 w-8 items-center justify-center rounded-full border border-zinc-600">@firstLetter</span>
                                    }
                                </div>
                                <div class="hidden lg:block">
                                    <p class="text-sm font-medium text-zinc-200">
                                        @context.User.Identity.Name
                                    </p>
                                    <p class="text-xs text-zinc-500">Premium Member</p>
                                </div>
                            </div>
                        </div>

                        <div class="flex items-center space-x-3 md:hidden">
                            <div class="relative mr-2 flex h-8 w-8 items-center justify-center rounded-full border border-zinc-600 bg-zinc-800 text-lg font-bold text-white">
                                @if (!string.IsNullOrEmpty(context.User.FindFirst("profile_picture")?.Value))
                                {
                                    <img loading="lazy"
                                    src="@context.User.FindFirst("profile_picture")?.Value"
                                    alt="User Avatar"
                                    class="h-8 w-8 rounded-full border border-zinc-600 object-cover object-center" />
                                }
                                else
                                {
                                    var name = context.User.Identity?.Name ?? "";
                                    var firstLetter = name.Length > 0 ? name.Substring(0, 1).ToUpper() : "?";
                                    <span class="flex h-8 w-8 items-center justify-center rounded-full border border-zinc-600">@firstLetter</span>
                                }
                            </div>
                        </div>

                    </div>

                    <div class="mt-4 flex space-x-3 md:hidden">
                        <button class="flex flex-1 items-center justify-center space-x-2 rounded-md bg-zinc-50 px-4 py-2.5 text-sm font-medium text-zinc-900 transition-all duration-200 hover:bg-zinc-200">
                            <span>Create Room</span>
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                            </svg>
                        </button>
                        <button class="flex flex-1 items-center justify-center space-x-2 rounded-md border border-zinc-700 bg-zinc-900 px-4 py-2.5 text-sm font-medium text-zinc-300 transition-all duration-200 hover:bg-zinc-800 hover:text-zinc-50">
                            <span>Join Room</span>
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            @* Main Content *@
            <div class="scrollbar h-full flex-1 overflow-y-auto">
                @if (isLoading)
                {
                    <div class="grid h-full w-full grid-cols-1 gap-4 px-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                        @for (int i = 0; i < 8; i++)
                        {
                            <div class="relative flex h-96 flex-col overflow-hidden rounded-xl border border-zinc-800/50 bg-zinc-900">
                                <div class="relative h-48 flex-shrink-0 overflow-hidden">
                                    <div class="animate-shimmer h-full w-full bg-zinc-800/50">
                                        <div class="bg-gradient-to-r animate-shimmer-bg absolute inset-0 from-zinc-800/50 via-zinc-700/50 to-zinc-800/50"></div>
                                    </div>
                                </div>
                                <div class="flex flex-col space-y-3 p-4">
                                    <div class="animate-shimmer h-6 w-3/4 rounded bg-zinc-800/50">
                                        <div class="bg-gradient-to-r animate-shimmer-bg absolute inset-0 from-zinc-800/50 via-zinc-700/50 to-zinc-800/50"></div>
                                    </div>
                                    <div class="animate-shimmer h-4 w-full rounded bg-zinc-800/50">
                                        <div class="bg-gradient-to-r animate-shimmer-bg absolute inset-0 from-zinc-800/50 via-zinc-700/50 to-zinc-800/50"></div>
                                    </div>
                                    <div class="animate-shimmer h-4 w-5/6 rounded bg-zinc-800/50">
                                        <div class="bg-gradient-to-r animate-shimmer-bg absolute inset-0 from-zinc-800/50 via-zinc-700/50 to-zinc-800/50"></div>
                                    </div>
                                    <div class="flex items-center justify-between pt-1">
                                        <div class="animate-shimmer h-4 w-1/3 rounded bg-zinc-800/50">
                                            <div class="bg-gradient-to-r animate-shimmer-bg absolute inset-0 from-zinc-800/50 via-zinc-700/50 to-zinc-800/50"></div>
                                        </div>
                                        <div class="animate-shimmer h-4 w-1/4 rounded bg-zinc-800/50">
                                            <div class="bg-gradient-to-r animate-shimmer-bg absolute inset-0 from-zinc-800/50 via-zinc-700/50 to-zinc-800/50"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="mt-auto px-4 pb-4">
                                    <div class="animate-shimmer h-10 w-full rounded-lg bg-zinc-800/50">
                                        <div class="bg-gradient-to-r animate-shimmer-bg absolute inset-0 from-zinc-800/50 via-zinc-700/50 to-zinc-800/50"></div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (errorMessage != null)
                {
                    <div class="flex h-full items-center justify-center">
                        <p class="text-red-500">@errorMessage</p>
                    </div>
                }
                else
                {
                    @if (rooms.Count == 0)
                    {
                        <div class="flex h-full flex-col items-center justify-center text-center">
                            <p class="text-lg font-semibold text-zinc-200">No active sessions found</p>
                            <p class="mt-2 text-sm text-zinc-400">Be the first one to create a room!</p>
                            <button class="mt-4 flex items-center space-x-2 rounded-md bg-zinc-50 px-4 py-2.5 text-sm font-medium text-zinc-900 transition-all duration-200 hover:bg-zinc-200 focus:ring-2 focus:ring-zinc-600 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none"
                            @onclick="() => isCreateRoomVisible = true">
                                <span>Create Room</span>
                                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                </svg>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="mb-2 flex items-center justify-between p-4">
                            <div>
                                <h1 class="text-lg font-semibold text-zinc-50">Public Rooms</h1>
                                <p class="hidden text-xs text-zinc-400 sm:block">Join ongoing watch parties or discover new content</p>
                            </div>
                            <div class="flex items-center gap-2">
                                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span>@rooms.Count active rooms</span>
                            </div>
                        </div>

                        <div class="grid h-full w-full grid-cols-1 gap-4 px-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                            @foreach (var room in rooms)
                            {
                                <div class="group relative flex h-96 flex-col overflow-hidden rounded-xl border border-zinc-800/50 transition-all duration-300 hover:border-zinc-700/50 hover:shadow-xl hover:shadow-zinc-900/20">
                                    <div class="relative h-48 flex-shrink-0 overflow-hidden">
                                        <div class="aspect-[16/9] h-full w-full">
                                            <img loading="lazy" src="@(room.content?.thumbnail ?? "/images/waiting.jpg?height=192&width=341")"
                                            alt="@(room.content?.title ?? "No Title")"
                                            class="h-full w-full object-cover transition-all duration-500 group-hover:scale-105" />
                                        </div>
                                        <div class="bg-gradient-to-t absolute inset-0 from-zinc-900/95 via-zinc-900/40 to-zinc-900/30" />
                                        <div class="absolute bottom-0 left-0 w-[80%] p-4">
                                            <h3 class='line-clamp-1 text-lg leading-tight font-bold drop-shadow-md @(room.content?.title != null ? "text-zinc-200" : "text-zinc-500")'>
                                                @(room.content?.title ?? "")
                                            </h3>
                                        </div>
                                        <div class="absolute top-3 right-3">
                                            @if (room.is_full)
                                            {
                                                <div class="inline-flex items-center gap-1.5 rounded-full bg-zinc-500/90 px-3 py-1 text-xs font-medium text-white shadow-md backdrop-blur-sm">
                                                    <div class="h-1.5 w-1.5 rounded-full bg-white"></div>
                                                    Full
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="inline-flex items-center gap-1.5 rounded-full bg-red-500/90 px-3 py-1 text-xs font-medium text-white shadow-md backdrop-blur-sm">
                                                    <div class="h-1.5 w-1.5 animate-pulse rounded-full bg-white"></div>
                                                    Live
                                                </div>
                                            }
                                        </div>
                                        <div class="absolute right-3 bottom-3">
                                            <div class="inline-flex items-center gap-1.5 rounded-full bg-black/70 px-3 py-1 text-xs font-medium text-zinc-200 shadow-md backdrop-blur-sm">
                                                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                </svg>
                                                @(FormatDuration(room.content?.duration ?? 0))
                                            </div>
                                        </div>
                                        <div class="absolute inset-0 flex items-center justify-center opacity-0 transition-all duration-300 group-hover:opacity-100">
                                            <div class="rounded-full bg-white/10 p-4 backdrop-blur-md transition-all duration-300 hover:scale-110 hover:bg-white/20">
                                                <svg class="h-8 w-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                                                    <path d="M8 5v14l11-7z" />
                                                </svg>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="flex min-h-0 flex-1 flex-col space-y-3 p-4">
                                        <h4 class="line-clamp-1 text-base font-semibold text-zinc-100">@(room.name ?? "Unnamed Room")</h4>
                                        <p class="line-clamp-1 flex-shrink text-sm leading-relaxed text-zinc-400">@(room.description ?? "No description available")</p>
                                        <div class="flex items-center justify-between pt-1 text-xs">
                                            <div class="flex items-center gap-1.5 text-zinc-400">
                                                <svg class="h-3.5 w-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                                </svg>
                                                <span class="line-clamp-1">@(room.host?.full_name ?? "Unknown Host")</span>
                                            </div>
                                            <div class="flex items-center gap-1.5 text-zinc-400">
                                                <svg class="h-3.5 w-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0z" />
                                                </svg>
                                                <span>@room.total_participants/@room.max_participants</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-auto px-4 pb-4">
                                        <button disabled="@room.is_full" @onclick="@(() => HandelDirectJoin(room.id))"
                                        class="w-full rounded-lg px-4 py-2.5 text-sm font-medium transition-all duration-300 flex justify-center items-center @(room.is_full ? "bg-zinc-800 text-zinc-500 cursor-not-allowed" : "bg-zinc-800 text-zinc-100 hover:text-zinc-900 hover:bg-zinc-100 hover:shadow-lg active:scale-[0.98]")">
                                            @if (isDirectJoining && currentJoiningRoomId == room.id)
                                            {
                                                <div id="emailLoadingContent" class="flex items-center space-x-2">
                                                    <div class="h-4 w-4 animate-spin rounded-full border-2 border-zinc-600 border-t-zinc-900"></div>
                                                    <span>Joining...</span>
                                                </div>
                                            }
                                            else
                                            {
                                                @(room.is_full ? "Room Full" : "Join Room")
                                            }
                                        </button>
                                    </div>
                                    <div class="pointer-events-none absolute inset-0 rounded-xl opacity-0 transition-opacity duration-300 group-hover:opacity-100">
                                        <div class="bg-gradient-to-r absolute inset-0 rounded-xl from-blue-500/5 via-purple-500/5 to-emerald-500/5" />
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
            </div>

            @* Footer *@
            <div class="border-t border-zinc-800/50 p-4">
                <div class="flex items-center justify-center space-x-6 text-zinc-500">
                    <div class="flex items-center space-x-1.5">
                        <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                        </svg>
                        <span class="text-xs font-medium">End-to-End Encrypted</span>
                    </div>
                    <div class="flex items-center space-x-1.5">
                        <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                        </svg>
                        <span class="text-xs font-medium">Secure Streaming</span>
                    </div>
                    <div class="flex items-center space-x-1.5">
                        <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        <span class="text-xs font-medium">Ultra-Low Latency</span>
                    </div>
                    <div class="flex items-center space-x-1.5">
                        <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        <button @onclick="handleLogout">
                            Logout
                        </button>
                    </div>
                </div>
            </div>

        </div>
    </Authorized>
</AuthorizeView>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<RoomGetDto> rooms = new();
    private bool isCreateRoomVisible = false;

    protected override async Task OnInitializedAsync()
    {

        isLoading = true;
        rooms = await RoomService.GetRoomsAsync();
        HomeClientService.OnHomeEventReceived += HandleRoomEvent;
        await HomeClientService.ConnectAsync();
        if (RoomClientService.IsConnected)
        {
            RoomClientService.DisconnectAsync();
        }
        isLoading = false;
    }

    private void handleLogout()
    {
        AuthService.Logout();
        NavigationManager.NavigateTo("/login", replace: true);
    }


    private void HandleRoomEvent(string eventType, RoomGetDto room)
    {
        InvokeAsync(() =>
        {
            var existingRoomIndex = rooms.FindIndex(r => r.id == room.id);

            switch (eventType)
            {
                case "room_created":
                    if (existingRoomIndex == -1)
                        rooms.Add(room);
                    break;

                case "room_updated":
                    if (existingRoomIndex != -1)
                        rooms[existingRoomIndex] = room;
                    break;

                case "room_deleted":
                    if (existingRoomIndex != -1)
                        rooms.RemoveAt(existingRoomIndex);
                    break;
            }

            StateHasChanged();
        });
    }


    private string FormatDuration(int durationInSeconds)
    {
        if (durationInSeconds <= 0) return "N/A";

        var timeSpan = TimeSpan.FromSeconds(durationInSeconds);

        if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours}h {timeSpan.Minutes}m {timeSpan.Seconds}s";

        if (timeSpan.TotalMinutes >= 1)
            return $"{timeSpan.Minutes}m {timeSpan.Seconds}s";

        return $"{timeSpan.Seconds}s";
    }


    // Direct join system
    private bool isDirectJoining { get; set; } = false;
    private Guid currentJoiningRoomId { get; set; } = Guid.Empty;
    public async Task HandelDirectJoin(Guid id)
    {
        isDirectJoining = true;
        currentJoiningRoomId = id;
        var res = await RoomService.DirectJoinRoomAsync(id);
        isDirectJoining = false;
        if (res == 1)
        {
            NavigationManager.NavigateTo($"/room/{id}");
        }
        else
        {
            currentJoiningRoomId = Guid.Empty;
        }
    }

    public void Dispose()
    {
        HomeClientService.OnHomeEventReceived -= HandleRoomEvent;
        _ = HomeClientService.DisconnectAsync();
    }
}